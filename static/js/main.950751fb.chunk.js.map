{"version":3,"sources":["services/index.js","services/SocketController.jsx","map/MapController.jsx","components/RealTimeContainer/TweetsStatistics.jsx","components/RealTimeContainer/TrendsContainer.jsx","components/RealTimeContainer/RealTimeContainer.jsx","services/TwitterService.js","components/Statics/StaticMainContainer.jsx","components/MainContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["apiURL","window","location","host","sockets","listenners","addListenner","key","listenner","addSocket","keyword","color","ws","WebSocket","websocketURL","encodeURIComponent","onmessage","message","tweet","JSON","parse","data","newData","date","Date","Object","entries","forEach","f","map","dataWithoutPosition","legend","undefined","markersLayer","createMap","containerId","L","center","zoom","layers","tileLayer","attribution","clearMarkers","clearLayers","createMarker","layerGroup","addTo","marker","position","icon","divIcon","className","html","bindPopup","content","author","userName","text","datetime","toLocaleTimeString","ReactDOMServer","renderToString","createPopup","id","addMarker","duration","staticMap","setTimeout","remove","updateLegend","d3","control","onAdd","div","DomUtil","create","innerHTML","TweetsStatistics","statistics","selectable","onClick","selected","users","retweets","mediaAndLinks","total","mentions","replies","geolocated","originals","gutter","title","trigger","onVisibleChange","console","log","span","value","_","includes","TrendsContainer","disabled","useState","trends","setTrends","useEffect","axios","get","then","res","trend","Search","Input","RealTimeContainer","onBack","setStatistics","targetTime","setTargetTime","seriesChart","setSeriesChart","metrics","useRef","Set","barChart","setBarChart","search","setSearch","colors","takenColors","setTakenColors","keyColor","count","filter","c","current","SocketController","getTime","handleRemove","tag","close","drawSeriesChart","chartData","isEmpty","now","length","cleanData","d","crossfilter","dimension","group","reduceSum","all","sort","a","b","getSeriesData","changeData","chart","Chart","container","autoFit","height","renderer","line","k","label","tooltip","showCrosshairs","shared","axis","animateOption","update","easing","render","drawBarChart","annotation","clear","coordinate","transpose","interval","animate","appear","push","MapController","retweet","reply","mediasAndLink","add","original","keys","splice","subTitle","enterButton","placeholder","onSearch","onChange","e","target","closable","onClose","bordered","onEnd","size","service","baseURL","href","Option","Select","wordsColors","formatFunctions","minutes","seconds","hour","day","StaticMainContainer","setData","offline","setOffline","selectedKeys","setSelectedKeys","selectedTypes","setSelectedTypes","dateInterval","setDateInterval","dateFilter","t","wordChart","pieChart","setPieChart","filteredData","type","coloredKeys","setColors","dateFormater","setDateFormater","dateFormatSelect","defaultValue","facts","setFacts","processData","parseInt","$numberLong","i","addColorToData","drawWordChart","dv","wc","wordCount","word","slice","getWordCount","DataSet","View","source","range","min","max","transform","spiral","fields","font","padding","timeInterval","Infinity","rotate","random","Math","fontSize","configWorldCloud","colorRange","domain","quantileSeq","rows","destroy","scale","x","nice","y","showTitle","showMarkers","reflect","point","v","shape","keyDimension","keyCountGroup","keyScale","dc","width","xUnits","ordinal","margins","top","right","bottom","left","colorAccessor","gap","renderHorizontalGridLines","on","timeDimension","timeCountGroup","minDate","maxDate","timeScale","dateSeriesChart","curve","brushOn","yAxisLabel","xAxisLabel","clipPadding","elasticY","mouseZoomable","seriesAccessor","keyAccessor","valueAccessor","itemHeight","autoItemWidth","horizontal","drawSunburst","typesDimension","typesCountGroup","colorScale","innerRadius","addMarkers","TwitterService","catch","factsData","draw","newFacts","registerShape","cfg","attrs","defaultStyle","style","textAlign","fontFamily","fill","stroke","textBaseline","getTextAttrs","textShape","addShape","Util","PI","backIcon","extra","Tabs","TabPane","MainContainer","setVisible","view","setView","visible","placement","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.950751fb.chunk.js","sourcesContent":["const host = window.location.host\n\n// const websocketURL = \"ws://\" + host;\nconst websocketURL = \"ws://localhost:9000\";\n\nconst apiURL = \"http://localhost:9000\";\n\nexport { apiURL, websocketURL }","import { websocketURL } from './index';\n\nconst sockets = {}\nconst listenners = {}\n\nexport function addListenner(key, listenner) {\n    listenners[key] = listenner;\n}\n\nexport function addSocket({ keyword, color }) {\n\n    const ws =\n        new WebSocket(websocketURL + '/tweets?keywords=' + encodeURIComponent(keyword))\n\n    sockets[keyword] = ws\n\n    ws.onmessage = (message) => {\n        const tweet = JSON.parse(message.data);\n        const newData = { ...tweet, date: new Date(tweet.date), key: keyword, color }\n        Object.entries(listenners).forEach(([_, f]) => f(newData))\n\n    }\n\n}\n\nexport function removeSocket(keyword) {\n    const ws = sockets[keyword];\n    ws.close(3000);\n    delete sockets[keyword];\n}","import { Comment } from 'antd';\nimport L from 'leaflet';\nimport ReactDOMServer from 'react-dom/server'\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar map = null;\nvar dataWithoutPosition = 0;\nvar legend = undefined;\nvar markersLayer = undefined\n\nexport function createMap(containerId) {\n    map = L.map(containerId, {\n        center: [0, 0],\n        zoom: 1,\n        layers: [\n            L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n                attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            }),\n        ]\n    })\n\n}\n\nexport function getMap() {\n    return map;\n}\n\nexport function getMarkersLayer() {\n    return markersLayer;\n}\n\nfunction createPopup(tweet) {\n\n    const content = <Comment\n        author={tweet.userName}\n        content={\n            <p>\n                {tweet.text}\n            </p>\n        }\n        datetime={tweet.date.toLocaleTimeString()}\n    ></Comment>\n    return ReactDOMServer.renderToString(\n        content\n    );\n}\n\nexport function clearMarkers() {\n    if (markersLayer) markersLayer.clearLayers()\n    dataWithoutPosition = 0;\n}\n\nexport function createMarker(tweet) {\n\n    if (!markersLayer) {\n        markersLayer = L.layerGroup().addTo(map)\n    }\n\n    const marker = L.marker(tweet.position, {\n        icon: L.divIcon({\n            className: 'css-icon',\n            html: `<div class=\"tweet-map-marker\"\n            style=\"background-color:${tweet.color}\"></div>`\n        })\n    })\n        .bindPopup(createPopup(tweet))\n\n    marker.id = tweet.id\n\n    return marker\n\n}\n\nexport function addMarker(tweet, duration = 20000, staticMap = false) {\n\n    if (!markersLayer) {\n        markersLayer = L.layerGroup().addTo(map)\n    }\n\n    if (tweet.position) {\n        const marker = createMarker(tweet)\n            .addTo(markersLayer)\n\n\n        if (!staticMap) {\n            setTimeout(() => {\n                marker.remove()\n            }, duration)\n        }\n    }\n    else {\n        dataWithoutPosition += 1\n        updateLegend()\n    }\n}\n\nfunction updateLegend() {\n    const text = (dataWithoutPosition > 1) ? `${dataWithoutPosition} tweets sem localização` : `${dataWithoutPosition} tweet sem localização`;\n    if (legend) {\n        if (dataWithoutPosition === 0) legend.remove()\n        else d3.select(\".map-legend\")\n            .text(text)\n    }\n    else {\n        legend = L.control({ position: 'bottomright' });\n        legend.onAdd = map => {\n            const div = L.DomUtil.create(\"div\", \"map-legend\")\n            div.innerHTML += text\n\n            return div\n        }\n\n        legend.addTo(map)\n    }\n}","import React from 'react';\nimport { Statistic, Row, Col, Tooltip, Divider } from 'antd';\nimport './TweetsStatistics.scss';\n\nconst columnSpan = 3\n\nexport default function TweetsStatistics({ statistics,\n  selectable = false,\n  onClick = () => false,\n  selected = []\n}) {\n\n  const { users = 0,\n    retweets = 0,\n    mediaAndLinks = 0,\n    total = 0,\n    mentions = 0,\n    replies = 0,\n    geolocated = 0,\n    originals = 0\n  } = statistics\n\n  return <div className=\"tweets-statistics-container\">\n    <Row gutter={[8, 16]}>\n\n      <Tooltip title=\"Total de tweets\" trigger=\"hover\" onVisibleChange={console.log}>\n        <Col span={columnSpan}>\n          <Statistic title=\"Total\" value={total} />\n        </Col>\n      </Tooltip>\n\n      <Tooltip title=\"Total de tweets com localização\">\n        <Col span={columnSpan}>\n          <Statistic title=\"Geolocalizados\" value={geolocated} />\n        </Col>\n      </Tooltip>\n\n      <Tooltip title=\"Número de usuários distintos twittando\">\n        <Col span={columnSpan}>\n          <Statistic title=\"Usuários\" value={users} />\n        </Col>\n      </Tooltip>\n\n      <Tooltip title=\"Quantidade de mídia e links compartilhadas\">\n        <Col span={columnSpan}>\n          <Statistic title=\"Mídia e Links\" value={mediaAndLinks} />\n        </Col>\n      </Tooltip >\n\n      <Tooltip title=\"Quantidade de menções realizadas\">\n        <Col span={columnSpan}>\n          <Statistic title=\"Menções\" value={mentions} />\n        </Col>\n      </Tooltip >\n\n      <Tooltip title=\"Total de retweets\">\n        <Col span={columnSpan} >\n          <div onClick={_ => onClick(\"retweet\")}>\n            <Statistic className={`retweets ${selectable ? \"selectable\" : \"\"} ${selected.includes(\"retweet\") ? \"selected\" : \"\"}`} title=\"Retweets\" value={retweets} />\n          </div>\n        </Col>\n      </Tooltip >\n\n      <Tooltip title=\"Total de respostas\">\n        <Col span={columnSpan}>\n          <div onClick={_ => onClick(\"reply\")}>\n            <Statistic className={`${selectable ? \"selectable\" : \"\"} ${selected.includes(\"reply\") ? \"selected\" : \"\"}`} title=\"Respostas\" value={replies} />\n          </div>\n        </Col>\n      </Tooltip >\n\n      <Tooltip title=\"Total de tweets que não são retweets ou respostas\">\n        <Col span={columnSpan}>\n          <div onClick={_ => onClick(\"original\")}>\n            <Statistic className={`${selectable ? \"selectable\" : \"\"} ${selected.includes(\"original\") ? \"selected\" : \"\"}`} title=\"Originais\" value={originals} />\n          </div>\n        </Col>\n      </Tooltip >\n\n\n    </Row >\n\n\n  </div >\n\n}","import React from 'react'\nimport './TrendsContainer.scss'\nimport axios from \"axios\"\nimport { useState } from 'react'\nimport { apiURL } from '../../services'\nimport { useEffect } from 'react'\nimport { Tag } from 'antd'\n\nexport default function TrendsContainer({ onClick, disabled }) {\n\n  const [trends, setTrends] = useState([])\n\n  function reloadTrends() {\n    axios.get(apiURL + \"/trends\", {\n      // headers: {\n      //   crossdomain: true,\n      //   Host: \"x\"\n      // }\n    })\n      .then(res => setTrends(res.data))\n  }\n\n  useEffect(() => {\n    reloadTrends()\n  }, [])\n\n  return <>\n    {!disabled && <>\n      <h3>Selecione um tema:</h3>\n\n      <div className=\"trends\">\n        {Object.entries(trends).map(([trend, value]) => <Tag onClick={_ => onClick(trend)} key={trend}>{`${trend} (${value})`}</Tag>)}\n      </div>\n    </>\n    }\n\n  </>\n\n}","import React from 'react';\nimport './RealTimeContainer.scss'\nimport { useRef } from 'react';\nimport crossfilter from 'crossfilter';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Input, Spin, Tag, PageHeader, Row, Col, Card } from 'antd';\nimport { Chart } from '@antv/g2';\nimport { isEmpty, sum } from 'rambda';\nimport * as SocketController from '../../services/SocketController';\nimport * as MapController from '../../map/MapController';\nimport CountDown from 'ant-design-pro/lib/CountDown';\nimport TweetsStatistics from './TweetsStatistics';\nimport TrendsContainer from './TrendsContainer';\n\nconst { Search } = Input;\n\nconst graphRefreshTimeout = 1500\nconst timeWindowSize = 0.5 * 60 * 1000\n\nexport default function RealTimeContainer({ onBack }) {\n\n    const [statistics, setStatistics] = useState({});\n    const [targetTime, setTargetTime] = useState();\n\n    const [seriesChart, setSeriesChart] = useState();\n\n    const metrics = useRef({ users: new Set() })\n\n    const [barChart, setBarChart] = useState();\n\n    const [search, setSearch] = useState(\"\");\n\n    const colors = [\n        \"#1F77B4\",\n        \"#278944\"\n        // \"#FF7F0E\",\n        // \"#2CA02C\",\n        // \"#9467BD\",\n        // \"#E377C2\",\n    ];\n\n    const [takenColors, setTakenColors] = useState([]);\n    const keyColor = useRef([]);\n\n    const data = useRef([])\n    const count = useRef({})\n\n    function addSocket(keyword = \"\") {\n        setSearch(\"\")\n        console.log(\"socket:\", keyword)\n        const color = colors.filter(c => !takenColors.map(c => c[1]).includes(c))[0]\n        count.current[keyword] = { value: 0, color };\n        setTakenColors([...takenColors, [keyword, color]])\n        SocketController.addSocket({ keyword, color })\n        setTargetTime(new Date().getTime() + graphRefreshTimeout)\n    }\n\n    function updateAll() {\n        drawSeriesChart()\n        drawBarChart()\n        setStatistics({\n            users: metrics.current.users.size,\n            retweets: (metrics.current.retweets || 0),\n            mediaAndLinks: metrics.current.mediasAndLink,\n            total: metrics.current.total,\n            mentions: metrics.current.mentions,\n            geolocated: metrics.current.geolocated,\n            replies: metrics.current.replies,\n            originals: metrics.current.original\n        })\n\n        setTargetTime(new Date().getTime() + graphRefreshTimeout)\n    }\n\n    useEffect(() => {\n        // series chart listener to collect all tweets\n\n        SocketController.addListenner(\"time\", ({ color, key, date }) => {\n            count.current[key].value += 1;\n            data.current.push({ color, key, date });\n        });\n\n        SocketController.addListenner(\"map\", tweet => {\n            MapController.addMarker(tweet);\n        });\n\n        SocketController.addListenner(\"metrics\", ({ userName, retweet, reply, mediasAndLink, mentions, position }) => {\n            metrics.current.users.add(userName)\n            if (retweet) metrics.current.retweets = (metrics.current.retweets || 0) + 1\n            else if (reply) metrics.current.replies = (metrics.current.replies || 0) + 1\n            else metrics.current.original = (metrics.current.original || 0) + 1\n            if (position) metrics.current.geolocated = (metrics.current.geolocated || 0) + 1\n            metrics.current.mediasAndLink = (metrics.current.mediasAndLink || 0) + mediasAndLink\n            metrics.current.total = (metrics.current.total || 0) + 1\n            metrics.current.mentions = (metrics.current.mentions || 0) + mentions\n\n        })\n\n        MapController.createMap(\"map\");\n        drawSeriesChart();\n        drawBarChart();\n    }, [])\n\n    useEffect(() => {\n        Object.keys(metrics.current).forEach(k => metrics.current[k] = 0)\n        metrics.current.users = new Set();\n        data.current.splice(0, data.current.length)\n        Object.keys(count.current).forEach(k => count.current[k].key = 0)\n        MapController.clearMarkers();\n        keyColor.current = takenColors\n    }, [takenColors])\n\n    function getSeriesData() {\n        if (isEmpty(data.current)) {\n            return []\n        }\n\n        const now = data.current[data.current.length - 1].date.getTime() - 1000\n        const cleanData = data.current.filter(d => d.date.getTime() < now &&\n            now - d.date.getTime() < timeWindowSize)\n        const facts = crossfilter(cleanData)\n        const dimension = facts.dimension(d => [d.key, d.date, d.color])\n        const group = dimension.group().reduceSum(_ => 1)\n\n        const seriesData = group.all()\n            .sort((a, b) => a.key[1] < b.key[1])\n            .map(d => ({ keyword: d.key[0], date: d.key[1].toLocaleTimeString(), color: d.key[2], value: d.value }))\n\n        // console.log(seriesData)\n\n        return seriesData\n    }\n\n    function handleRemove(tag) {\n        SocketController.removeSocket(tag)\n        delete count.current[tag]\n        // if (takenColors.length === 1) seriesChart.destroy();\n        setTakenColors(takenColors.filter(c => c[0] !== tag))\n    }\n\n    function drawSeriesChart() {\n        const chartData = getSeriesData()\n        if (isEmpty(chartData))\n            return;\n\n        if (seriesChart) {\n            seriesChart.changeData(chartData)\n            return;\n        }\n\n        const chart = new Chart({\n            container: 'series',\n            autoFit: true,\n            height: 200,\n            renderer: 'svg'\n        })\n\n        chart.data(chartData)\n\n        chart\n            .line()\n            .position('date*value')\n            .color('keyword', k => {\n                return keyColor.current.filter(c => c[0] === k)[0][1]\n            })\n            .label(false)\n\n        chart.tooltip({\n            showCrosshairs: true,\n            shared: true,\n        });\n\n        chart.axis('date', {\n            animateOption: {\n                update: {\n                    duration: 1000,\n                    easing: 'easeLinear'\n                }\n            }\n        });\n\n        chart.render()\n        setSeriesChart(chart)\n    }\n\n    function getBarData() {\n        return Object.entries(count.current)\n            .map(([key, value]) => ({ ...value, key }))\n            .sort((a, b) => a.value < b.value)\n    }\n\n    function drawBarChart() {\n\n        const data = getBarData()\n\n        if (isEmpty(data))\n            return;\n\n        if (barChart) {\n            barChart.annotation().clear(true);\n            // barChart.annotation().text({\n            //     position: ['95%', '10%'],\n            //     content: sum(data.map(d => d.value)) + \" tweets\",\n            //     style: {\n            //         fontSize: 40,\n            //         fontWeight: 'bold',\n            //         fill: '#dadada',\n            //         textAlign: 'end'\n            //     },\n            //     animate: false,\n            // });\n\n            barChart.changeData(data)\n            return;\n        }\n\n        const chart = new Chart({\n            container: 'bar',\n            autoFit: true,\n            height: 300,\n            renderer: 'svg'\n            // padding: [20, 60]\n        });\n        // @ts-ignore\n        chart.data(data);\n        chart.coordinate('rect').transpose();\n        chart.legend(false);\n        chart.tooltip(true);\n        // chart.axis('value', false);\n        // chart.axis('key', {\n        //     animateOption: {\n        //         update: {\n        //             duration: 1000,\n        //             easing: 'easeLinear'\n        //         }\n        //     }\n        // });\n\n        // chart.annotation().text({\n        //     position: ['95%', '10%'],\n        //     content: sum(data.map(d => d.value)) + \" tweets\",\n        //     style: {\n        //         fontSize: 40,\n        //         fontWeight: 'bold',\n        //         fill: '#dadada',\n        //         textAlign: 'end'\n        //     },\n        //     animate: false,\n        // });\n\n        chart\n            .interval()\n            .position('key*value')\n            .color('key', k => {\n                return keyColor.current.filter(c => c[0] === k)[0][1]\n            })\n            .animate({\n                appear: {\n                    duration: 1000,\n                    easing: 'easeLinear'\n                },\n                update: {\n                    duration: 500,\n                    easing: 'easeLinear'\n                }\n            });\n\n        chart.render();\n        setBarChart(chart)\n    }\n\n    function handleBack() {\n        Object.keys(count.current).map(handleRemove)\n\n        onBack()\n    }\n\n    return <div className=\"main-container\">\n        <PageHeader title=\"Tweets monitor\" subTitle=\"Monitore assuntos em tempo real (ou quase isso)\" onBack={handleBack}>\n\n            <div className=\"trends-container\">\n                <TrendsContainer onClick={addSocket} disabled={takenColors.length == 2} />\n            </div>\n\n            <div className=\"tweets-search-container\">\n                <Search\n                    enterButton\n                    disabled={takenColors.length == 2}\n                    placeholder=\"Ou entre seu\"\n                    onSearch={addSocket}\n                    value={search}\n                    onChange={e => setSearch(e.target.value)}\n                    className=\"tweets-search\" />\n                <div className=\"tags-container\">\n                    {takenColors.map(([tag, color]) =>\n                        <Tag\n                            key={tag}\n                            closable={true}\n                            color={color}\n                            onClose={_ => handleRemove(tag)}\n                        >\n                            <p>{tag}</p>\n                        </Tag>\n                    )\n                    }\n                </div>\n            </div>\n        </PageHeader>\n\n        <Card title=\"Métricas\" bordered={false}>\n            <TweetsStatistics statistics={statistics} />\n        </Card>\n\n        <Card title=\"Contagem temporal\" bordered={false}>\n            <div className=\"series-container\">\n                <div id=\"series\"></div>\n            </div>\n        </Card>\n\n\n        <Row gutter={[16, 16]}>\n            <Col span={12}>\n                <Card title=\"Localização\" bordered={false}>\n                    <div className=\"map-container\">\n                        <div id=\"map\"></div>\n                    </div >\n                </Card>\n            </Col>\n\n            <Col span={12}>\n                <Card title=\"Contagem total\" bordered={false}>\n                    <div className=\"bars-container\">\n                        <div id=\"bar\"></div>\n                    </div>\n                </Card>\n\n            </Col>\n        </Row>\n\n        <CountDown\n            className=\"count-down-refresh\"\n            target={targetTime}\n            onEnd={updateAll}\n        />\n\n    </div >\n        ;\n\n}","import axios from 'axios';\nimport { apiURL } from '.';\n\nlet API_URL = apiURL;\n\nconst service = axios.create({ baseURL: API_URL });\nexport default {\n\n    find() {\n        return service.get(\"/historical-tweets\").then(res => res.data)\n    },\n\n    getStaticData() {\n        return axios.get(window.location.href + \"data.json\").then(res => res.data)\n    }\n\n}\n","import React from 'react';\nimport { Input, PageHeader, Row, Col, Card, Checkbox, Select, Icon } from 'antd';\nimport { useRef } from 'react';\nimport crossfilter from 'crossfilter';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Chart, registerShape, Util } from '@antv/g2';\nimport { isEmpty } from 'lodash';\nimport DataSet from '@antv/data-set';\nimport * as d3 from \"d3\";\nimport * as dc from \"dc\";\nimport _ from 'lodash';\nimport { quantileSeq, arg } from \"mathjs\"\n\nimport * as MapController from '../../map/MapController';\nimport './StaticMainContainer.scss';\n\n// import data from './data.json';\nimport TweetsStatistics from '../RealTimeContainer/TweetsStatistics';\nimport TwitterService from '../../services/TwitterService';\n\nconst { Option } = Select\n\nconst maxWords = 50;\nconst wordsColors = [\"#646464\", \"#818181\", \"#a2a2a2\", \"#ffffff\"]\n\nconst formatFunctions = {\n    minutes: d3.timeMinute,\n    seconds: d3.timeSecond,\n    hour: d3.timeHour,\n    day: d3.timeDay\n}\n\nexport function StaticMainContainer({ onBack }) {\n\n    const [data, setData] = useState();\n    const [offline, setOffline] = useState()\n\n    const [selectedKeys, setSelectedKeys] = useState([])\n    const keyFilter = t => selectedKeys.length === 0 || selectedKeys.includes(t.key)\n\n    const [selectedTypes, setSelectedTypes] = useState([])\n    const typeFilter = t => selectedTypes.length === 0 || selectedTypes.includes(t.type)\n\n    const [dateInterval, setDateInterval] = useState()\n    const dateFilter = t => !dateInterval || (t.date.getTime() >= dateInterval[0] && t.date.getTime() <= dateInterval[1])\n\n    const wordChart = useRef()\n\n    const [barChart, setBarChart] = useState()\n    const [pieChart, setPieChart] = useState()\n\n    const filteredData = (data || [])\n        .filter(keyFilter)\n        .filter(typeFilter)\n        .filter(dateFilter)\n\n    const colors = [\"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\", \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\", \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\", \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\", \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\"]\n\n    const [statistics, setStatistics] = useState({});\n    const metrics = useRef({ users: new Set() })\n    const [coloredKeys, setColors] = useState([]);\n\n    const [dateFormater, setDateFormater] = useState(() => formatFunctions.seconds)\n    const dateFormatSelect = <Select defaultValue={\"seconds\"} onChange={f => setDateFormater(() => formatFunctions[f])}>\n        <Option key={0} value=\"seconds\">Segundos</Option>\n        <Option key={1} value=\"minutes\">Minutos</Option>\n        <Option key={1} value=\"hour\">Hora</Option>\n        <Option key={1} value=\"day\">Dia</Option>\n    </Select>\n\n    const [facts, setFacts] = useState()\n\n    function getTweetType(tweet) {\n        if (tweet.retweet) return \"Retweet\"\n        else if (tweet.reply) return \"Resposta\"\n        else return \"Original\"\n    }\n\n    function processData(data) {\n        data.forEach(d => {\n            d.date = new Date(parseInt(d.date.$numberLong))\n            d.type = getTweetType(d)\n        });\n        setData(addColorToData(data))\n    }\n\n    useEffect(() => {\n        /** Backend's Request to get historical tweets*/\n        TwitterService.find().then(data => {\n            setOffline(false)\n            processData(data)\n        })\n            .catch(_ => {\n                setOffline(true)\n                TwitterService.getStaticData().then(processData)\n            })\n    }, [])\n\n\n    useEffect(() => {\n        if (data) init();\n    }, [data])\n\n    useEffect(() => {\n        if (facts) {\n            drawSeriesChart(facts).render()\n        }\n    }, [dateFormater, facts])\n\n    useEffect(() => {\n        if (facts) {\n            if (dateInterval) {\n                const newFacts = crossfilter(data.filter(dateFilter))\n                drawBarChart(newFacts).render()\n                drawSunburst(newFacts).render()\n            }\n            else {\n                const factsData = (data || [])\n                const facts = crossfilter(factsData)\n                // const idDimension = facts.dimension(d => d.id)\n\n\n                // MapController.getMap()\n                //     .on('moveend', e => updateAreaFilter(e, idDimension))\n\n                drawBarChart(facts);\n                drawSeriesChart(facts);\n                // configStats();\n                // addMarkers();\n                // drawWordChart();\n                drawSunburst(facts);\n\n                dc.renderAll()\n\n            }\n        }\n\n    }, [dateInterval, facts])\n\n    useEffect(() => {\n        MapController.clearMarkers()\n        if (!isEmpty(data)) {\n\n            if (barChart)\n                barChart.on('filtered.monitor', (_, type) => {\n                    if (selectedKeys.includes(type))\n                        setSelectedKeys(selectedKeys.filter(k => k !== type))\n                    else setSelectedKeys([...selectedKeys, type])\n                });\n            if (pieChart)\n                pieChart.on('filtered.monitor', (_, type) => {\n                    if (selectedTypes.includes(type))\n                        setSelectedTypes(selectedTypes.filter(k => k !== type))\n                    else setSelectedTypes([...selectedTypes, type])\n                });\n\n            drawWordChart();\n            addMarkers();\n        }\n        // draw()\n    }, [selectedKeys, selectedTypes, dateInterval])\n\n    //** Initializations */\n    function init() {\n        MapController.createMap(\"map\");\n        draw();\n    }\n\n    // function updateAreaFilter(e, idDimension) {\n    //     const visible = new Set()\n\n    //     data.forEach(d => {\n    //         if(!d.position) visible.add\n    //     })\n\n    //     MapController.getMarkersLayer().eachLayer(marker => {\n    //         if (e.target.getBounds().contains(marker.getLatLng()))\n    //             visible.add(marker.id)\n    //     })\n\n    //     console.log(visible)\n\n    //     idDimension.filterFunction(id => visible.has(id))\n    // }\n\n    function draw() {\n        if (data) {\n            const factsData = (data || [])\n            const facts = crossfilter(factsData)\n            setFacts(facts)\n            // const idDimension = facts.dimension(d => d.id)\n\n\n            // MapController.getMap()\n            //     .on('moveend', e => updateAreaFilter(e, idDimension))\n\n            drawBarChart(facts);\n            drawSeriesChart(facts);\n            configStats();\n            addMarkers();\n            drawWordChart();\n            drawSunburst(facts);\n\n            dc.renderAll()\n        }\n\n    }\n\n    /**\n     * \n     * ###########  Draw Charts  ###########\n     * \n    */\n\n    /** Word Cloud */\n    function drawWordChart() {\n\n        const dv = configWorldCloud();\n        if (!dv) return\n        const [min, max] = dv.range('value');\n\n        const colorRange = d3.scaleQuantize()\n\n            .domain(quantileSeq(dv.rows.map(d => d.value), [0, 0.33, 0.66, 1]))\n            .range(wordsColors)\n\n        if (wordChart.current) {\n            wordChart.current.destroy()\n        }\n\n        const chart = new Chart({\n            container: 'word-cloud',\n            autoFit: true,\n            height: 300,\n            padding: 0\n        });\n\n        chart.data(dv.rows);\n        chart.scale({\n            x: { nice: false },\n            y: { nice: false }\n        });\n        chart.legend(false);\n        chart.axis(false);\n        chart.tooltip({\n            showTitle: false,\n            showMarkers: false\n        });\n        chart.coordinate().reflect();\n        chart.point()\n            .position('x*y')\n            .color('value', v => {\n\n                return colorRange(v)\n            })\n            .shape('cloud');\n        chart.render();\n\n        wordChart.current = chart\n    }\n\n    function configWorldCloud() {\n        const wc = getWordCount()\n        if (isEmpty(wc))\n            return\n        const dv = new DataSet.View().source(wc);\n\n        const [min, max] = dv.range('value');\n        dv.transform({\n            spiral: 'rectangular',\n            type: 'tag-cloud',\n            fields: ['key', 'value'],\n            font: 'serif',\n            size: [600, 300],\n            padding: 0,\n            timeInterval: Infinity,\n            rotate() {\n                let random = ~~(Math.random() * 4) % 4;\n                if (random === 2) {\n                    random = 0;\n                }\n                return random * 90; // 0, 90, 270\n            },\n            fontSize(d) {\n                const [minFont, maxFont] = [24, 80]\n                const size = ((d.value - min) / (max - min)) * (maxFont - minFont) + minFont\n                return size;\n            }\n        });\n        return dv;\n    }\n\n    /** Bar Chart */\n    function drawBarChart(facts) {\n        const keyDimension = facts.dimension(d => d.key)\n        const keyCountGroup = keyDimension.group()\n\n        const keyScale = d3.scaleOrdinal().domain(Object.keys(coloredKeys))\n\n        const chart = dc.barChart(d3.select(\"#bar\"))\n        chart\n            .width(600)\n            .height(300)\n            .dimension(keyDimension)\n            .xUnits(dc.units.ordinal)\n            .margins({ top: 10, right: 20, bottom: 50, left: 50 })\n            .x(keyScale)\n            .colors(k => coloredKeys[k])\n            .colorAccessor(d => d.key)\n            // .centerBar(true)\n            .gap(50)\n            .renderHorizontalGridLines(true)\n            .group(keyCountGroup, 'Contagem dos tipos de crimes')\n\n        chart.on('filtered.monitor', (_, type) => {\n            if (selectedKeys.includes(type))\n                setSelectedKeys(selectedKeys.filter(k => k !== type))\n            else setSelectedKeys([...selectedKeys, type])\n        });\n\n        setBarChart(chart)\n        return chart;\n\n    }\n\n    /** Series Chart */\n    function drawSeriesChart(facts) {\n\n        const timeDimension = facts.dimension(d => [d.key, dateFormater(d.date)])\n        const timeCountGroup = timeDimension.group()\n\n        // const rangeTimeDimension = facts.dimension(d => [d.key, dateFormater(d.date)])\n        // const rangeTimeCountGroup = rangeTimeDimension.group()\n\n        const [minDate, maxDate] = d3.extent(data || [], d => dateFormater(d.date))\n\n        const timeScale = d3\n            .scaleTime()\n            .domain([minDate, maxDate])\n\n\n        // const rangeTimeScale = d3\n        //     .scaleTime()\n        //     .domain([d3.min(data || [], d => dateFormater(d.date)), d3.max(data || [], d => dateFormater(d.date))])\n\n        const dateSeriesChart = new dc.SeriesChart(d3.select(\"#series\"));\n        // const rangeChart = new dc.SeriesChart(d3.select(\"#series-range\"));\n\n        dateSeriesChart\n            .width(1200)\n            .height(300)\n            .chart(function (c) { return new dc.LineChart(c).curve(d3.curveCardinal); })\n            .x(timeScale)\n            .margins({ top: 10, right: 10, bottom: 50, left: 80 })\n            .brushOn(false)\n            .yAxisLabel(\"Quantidade de Tweets\")\n            .xAxisLabel(\"Horário\")\n            .clipPadding(10)\n            .elasticY(true)\n            .dimension(timeDimension)\n            .group(timeCountGroup)\n            .mouseZoomable(true)\n\n            // .rangeChart(rangeChart)\n            .seriesAccessor(function (d) { return d.key[0]; })\n            .keyAccessor(function (d) { return d.key[1]; })\n            .valueAccessor(function (d) { return +d.value; })\n            .legend(dc.legend().x(80).y(284).itemHeight(13).autoItemWidth(true).horizontal(1))\n            .colors(k => coloredKeys[k])\n            .colorAccessor(d => d.key[0]);\n\n        dateSeriesChart.on(\"filtered.monitor\", (_, dateInterval) => {\n            if (isEmpty(dateInterval)) setDateInterval()\n            else {\n                if (dateInterval[0].getTime() === minDate.getTime() && dateInterval[1].getTime() === maxDate.getTime())\n                    setDateInterval()\n                else setDateInterval(dateInterval)\n            }\n        })\n\n\n\n        // rangeChart\n        //     .width(1200)\n        //     .height(300)\n        //     .chart(function (c) { return new dc.LineChart(c).curve(d3.curveCardinal) })\n        //     .x(rangeTimeScale)\n        //     .margins({ top: 10, right: 10, bottom: 50, left: 80 })\n        //     .brushOn(true)\n        //     .mouseZoomable(true)\n        //     .yAxisLabel(\"Quantidade de Tweets\")\n        //     .xAxisLabel(\"Horário\")\n        //     .clipPadding(10)\n        //     .elasticY(true)\n        //     .dimension(timeDimension)\n        //     .group(timeCountGroup)\n        //     .seriesAccessor(function (d) { return d.key[0]; })\n        //     .keyAccessor(function (d) { return d.key[1]; })\n        //     .valueAccessor(function (d) { return +d.value; })\n        //     // .legend(dc.legend().x(80).y(284).itemHeight(13).autoItemWidth(true).horizontal(1))\n        //     .colors(k => coloredKeys[k])\n        //     .colorAccessor(d => d.key[0]);\n\n        // rangeChart.xAxis().ticks(4)\n\n\n        return dateSeriesChart\n\n    }\n\n    function drawSunburst(facts) {\n        const typesDimension = facts.dimension(d => d.type)\n        const typesCountGroup = typesDimension.group()\n\n        const colorScale = d3.scaleOrdinal()\n            .domain([\"Resposta\", \"Retweet\", \"Original\"])\n            .range([\"#46EDC8\", \"#374D7C\", \"#FDF289\"])\n\n        var chart = dc.pieChart(d3.select(\"#sunburst\"));\n        chart.width(600)\n            .height(295)\n            .innerRadius(0)\n            .dimension(typesDimension)\n            .group(typesCountGroup)\n            .colors(colorScale)\n            .colorAccessor(d => d.key)\n            .legend(dc.legend())\n\n        chart.on('filtered.monitor', (_, type) => {\n            if (selectedTypes.includes(type))\n                setSelectedTypes(selectedTypes.filter(k => k !== type))\n            else setSelectedTypes([...selectedTypes, type])\n        });\n\n        setPieChart(chart)\n        return chart\n    }\n\n\n    /**\n     * \n     * ###########  Processing Data  ###########\n     * \n    */\n\n    /** Satistics */\n    function configStats() {\n        metrics.current = { users: new Set() }\n\n        data.forEach(tweet => {\n            if (tweet.retweet) metrics.current.retweets = (metrics.current.retweets || 0) + 1\n            else if (tweet.reply) metrics.current.replies = (metrics.current.replies || 0) + 1\n            else metrics.current.original = (metrics.current.original || 0) + 1\n\n            metrics.current.users.add(tweet.userName);\n            if (tweet.position) metrics.current.geolocated = (metrics.current.geolocated || 0) + 1\n            metrics.current.mediasAndLink = (metrics.current.mediasAndLink || 0) + tweet.mediasAndLink\n            metrics.current.mentions = (metrics.current.mentions || 0) + tweet.mentions\n            metrics.current.total = (metrics.current.total || 0) + 1\n        })\n\n        setStatistics({\n            users: metrics.current.users.size,\n            retweets: (metrics.current.retweets || 0),\n            mediaAndLinks: metrics.current.mediasAndLink,\n            total: metrics.current.total,\n            mentions: metrics.current.mentions,\n            geolocated: metrics.current.geolocated,\n            replies: metrics.current.replies,\n            originals: metrics.current.original\n        })\n    }\n\n    /**\n     * \n     * ###########  Auxiliary Functions  ###########\n     * \n    */\n\n    function getTextAttrs(cfg) {\n        return {\n            ...cfg.defaultStyle,\n            ...cfg.style,\n            fontSize: cfg.data.size,\n            text: cfg.data.text,\n            textAlign: 'center',\n            fontFamily: cfg.data.font,\n            fill: cfg.color || cfg.defaultStyle.stroke,\n            textBaseline: 'Alphabetic'\n        };\n    }\n\n    registerShape('point', 'cloud', {\n        draw(cfg, container) {\n            const attrs = getTextAttrs(cfg);\n            const textShape = container.addShape('text', {\n                attrs: {\n                    ...attrs,\n                    x: cfg.x,\n                    y: cfg.y\n                }\n            });\n            if (cfg.data.rotate) {\n                Util.rotate(textShape, cfg.data.rotate * Math.PI / 180);\n            }\n\n            return textShape;\n        }\n    });\n\n\n\n    function addColorToData(data) {\n        const keyColor = {\n            // retweet: \"white\",\n            // reply: \"magenta\",\n            // original: \"black\"\n        }\n        let i = 0\n\n        const newData = data.map(t => {\n            if (keyColor[t.key]) return { ...t, color: keyColor[t.key] }\n            else {\n                if (i > colors.length - 1) return t\n                keyColor[t.key] = colors[i]\n                i += 1\n                return { ...t, color: keyColor[t.key] }\n            }\n        }).filter(t => t.color)\n\n        setColors(keyColor);\n        return newData\n    }\n\n\n    /** Add markers to map */\n    function addMarkers() {\n        filteredData\n            .forEach(function (tweet) {\n                tweet.date = new Date(tweet.date);\n                MapController.addMarker(tweet, _, true);\n            });\n    }\n\n    function getWordCount() {\n        const wc = {}\n\n        filteredData.forEach(({ wordCount }) => {\n            Object.entries(wordCount).map(([word, count]) => wc[word] = count + (wc[word] || 0))\n        })\n\n        const wordCount = Object.entries(wc)\n            .map(([key, value]) => ({ key, value }))\n\n        wordCount.sort((a, b) => b.value - a.value)\n\n        if (wordCount.length <= maxWords) return wordCount\n        else return wordCount.slice(0, maxWords)\n    }\n\n\n    /** Render */\n    return (\n        <div className=\"main-container\">\n            <PageHeader\n                title=\"Tweets Analyzer\"\n                subTitle=\"Análise histórica dos tweets consumidos\"\n                onBack={onBack}\n                backIcon={offline ? false : <Icon type=\"arrow-left\" />}\n            >\n                {/* <CheckboxGroup options={Object.keys(coloredKeys)} value={selectedKeys} onChange={setSelectedKeys} /> */}\n            </PageHeader>\n            <Card title=\"Métricas\" bordered={false}>\n                <TweetsStatistics statistics={statistics} selectable={false} />\n            </Card>\n\n            <br />\n            <Row>\n                <Card title=\"Contagem temporal\" bordered={false} extra={dateFormatSelect}>\n                    <div className=\"static-series-container\">\n                        <div id=\"series\"></div>\n\n                        <div id=\"series-range\"></div>\n                    </div>\n                </Card>\n            </Row>\n            <br />\n            <Row gutter={[16, 16]}>\n                <Col span={12}>\n                    <Card title=\"Localização\" bordered={false}>\n                        <div className=\"map-container\">\n                            <div id=\"map\"></div>\n                        </div >\n                    </Card>\n\n\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Contagem total\" bordered={false}>\n                        <div className=\"static-bars-container\">\n                            <div id=\"bar\"></div>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n            <br />\n\n            <Row gutter={[16, 16]}>\n                <Col span={12}>\n                    <Card title=\"Contagem por tipo\" bordered={false}>\n                        <div className=\"static-sunburst-container\">\n                            <div id=\"sunburst\"></div>\n                        </div>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Palavras mais utilizadas\" bordered={false}>\n                        <div className=\"word-cloud-container\">\n                            <div id=\"word-cloud\"></div>\n                        </div>\n                    </Card>\n\n\n                </Col>\n\n            </Row>\n            <br />\n\n            <Row>\n\n            </Row>\n        </div>\n    );\n}","import React from 'react'\nimport { Tabs, Drawer, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport \"./MainContainer.scss\";\nimport RealTimeContainer from './RealTimeContainer/RealTimeContainer';\nimport { useState } from 'react';\nimport { StaticMainContainer } from './Statics/StaticMainContainer';\n\nconst { TabPane } = Tabs;\n\nexport default function MainContainer() {\n\n    const [view, setView] = useState(<StaticMainContainer key={+ new Date()} onBack={() => setVisible(true)} />)\n    const [visible, setVisible] = useState(false)\n\n    function setStaticView() {\n        setVisible(false)\n        setView(<StaticMainContainer key={+ new Date()} onBack={() => setVisible(true)} />)\n    }\n\n    function setRealTimeView() {\n        setVisible(false)\n        setView(<RealTimeContainer key={+ new Date()} onBack={() => setVisible(true)} />)\n    }\n\n    return <>\n        <Drawer\n            title=\"Selecione um painel\"\n            placement=\"left\"\n            visible={visible}\n            onClose={() => setVisible(false)}\n        >\n            <Button type=\"link\" onClick={setStaticView}>Análise histórica</Button>\n            <Button type=\"link\" onClick={setRealTimeView}>Análise em tempo real</Button>\n        </Drawer>\n\n        <div className=\"view-container\">\n            {view}\n        </div>\n    </>;\n}","import React from 'react';\nimport './App.css';\nimport MainContainer from './components/MainContainer';\nimport { StaticMainContainer } from './components/Statics/StaticMainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <StaticMainContainer /> */}\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}